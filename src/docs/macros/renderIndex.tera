{% import "utils.tera" as utils %}
{%- macro renderIndex(schemas) -%}
{%- set namespaceKeys = utils::getKeysMatching(schemas=schemas, pattern="^namespaces\.[^\.]+$") | split(pat="|") -%}
{%- for key in namespaceKeys -%}
{%- set metaKey = key ~ ".meta" -%}
{%- set releasesKey = key ~ ".releases" -%}
{#schemas[key] | get(key="releases") | get(key="properties") -%#}
{%- set numReleases = utils::getKeysMatching(schemas=schemas[key].properties.releases.properties, pattern="^.*$") | split(pat="|") | length  -%}
{{ self::renderName(namespaceMeta=schemas[key].properties.meta.properties) }}
{{ self::renderDesc(namespaceMeta=schemas[key].properties.meta.properties) }}
{{ self::renderReleases(releasesProp=schemas[key].properties.releases.properties) }}
{% endfor -%}
{%- endmacro renderIndex -%}

{%- macro renderName(namespaceMeta) -%}
### [:{{ namespaceMeta.name.enum.0 }}](/{{ namespaceMeta.name.enum.0 }})
{%- endmacro renderName -%}

{%- macro renderDesc(namespaceMeta) -%}
{{ namespaceMeta.description.enum.0 | default (value="") }}
{%- endmacro renderDesc -%}

{%- macro renderReleases(releasesProp) -%}
{% for key, _ in releasesProp %}
- {{ self::renderReleaseName(name=key, releaseProp=releasesProp[key].properties) }}<br>
{{ self::renderReleaseDesc(releaseProp=releasesProp[key].properties) }}
{%- endfor %}
{%- endmacro renderReleases -%}

{%- macro renderReleaseName(name, releaseProp) -%}
[{{ name }}]({{ releaseProp.chart.properties.url.enum.0 | default(value="") }})
{%- endmacro renderReleaseName -%}

{%- macro renderReleaseDesc(releaseProp) -%}
{%- set _desc = releaseProp.description.enum.0 | default(value="") -%}
{%- if _desc == "" -%}
{%- set _desc = releaseProp.chart.properties.description.enum.0 | default(value="") -%}
{%- endif -%}
{{ _desc }}
{%- endmacro renderReleaseDesc -%}
